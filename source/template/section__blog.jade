.blog__wrapper
	.section__blog
		.section__blog_nav
			ul.nav__list
				li.nav__item.active.wp1 
					a(href='#') CSS Grid Layout
				li.nav__item.wp2
					a(href='#') Альтернативы Adobe Photoshop
				li.nav__item.wp3
					a(href='#') Советы начинающему веб-разработчику
		.section__blog_article
			ul.article__list
				li.article__item(wp_index='1')
					.article__item-title CSS Grid Layout
					.article__item-date 10 мая 2017
					p.article__item-text CSS Grid Layout — это новая спецификация CSS, управляющая раскладкой элементов на странице. Звучит похоже на флексбокс, не так ли? Действительно между двумя этими технологиями много общего, однако есть и существенная разница. Flexbox устанавливает правила для определения размера элементов флекс-контейнера, в grid же все правила, касающиеся размеров элементов, применяются к самому контейнеру. Именно грид-контейнер делится на колонки и ряды, а дочерние элементы помещаются в уже готовые ячейки. Эти особенности делают grid-технологию идеальной для определения раскладки высокого уровня, то есть оформления крупных разделов страницы.
					p.article__item-text На данный момент спецификация еще не готова, не утверждена и никем не поддерживается, кроме (о, чудо!) IE10 (но с устаревшим синтаксисом и префиксом ms-) и последних версий Ghrome (Chrome Canary, chrome://flags — Включить экспериментальные функции). И после утверждения пройдет немало времени до момента окончательной реализации и хорошей поддержки в браузерах, так что CSS Grid Layout ждать нам еще не скоро. Но точно ждать, так как это очень мощный и достаточно изящный инструмент, которого нам, в целом, не хватает. Пока будем между делом потихоньку подучивать новый (довольно сложный) синтаксис, экспериментировать и по-прежнему делать раскладки на флоатах, инлайн-блоках и флексах.
				li.article__item.hide(wp_index='2')
					.article__item-title Альтернативы Adobe Photoshop
					.article__item-date 5 мая 2017
					p.article__item-text 25 лет назад, 19 февраля 1990 года, братья Джон и Томас Нолл запустили небольшую программу, которая соединила компьютер со сканером. Проект назвали Photoshop. На протяжении двух десятилетий он был монополистом на рынке графических программ, а слово «фотошоп» стало нарицательным. Однако, вероятно, первенство Photoshop пошатнулось. Многие дизайнеры и верстальщики переходят на другие альтернативы. Пройдёмся по ним.
					p.article__item-text 1. Sketch
					p.article__item-text Так как Sketch — редактор векторный, а графика чаще всего нужна растровая, то этому было уделено пристальное внимание. При использовании Sketch у вас не будет ни малейших проблем с масштабированием под любые размеры. В несколько кликов вы сможете получить сразу серию растровых изображений в нужных разрешениях со сглаживанием и без малейших артефактов. Экспортировать можно слой целиком (для этого нужно включить флажок «Exportable» в правом нижем углу инспектора), либо задать специальную экспортируемую зону «slice». Настроив опции экспорта для отдельных частей вашего дизайна, вы можете «выгрузить» всю нужную графику одним нажатием на кнопку. Для совершенного вида растровых изображений можно воспользоваться функцией выравнивания объектов до целых пикселей, что позволяет обойтись без размытия и сглаживания.
					p.article__item-text Одна из главных «фишек» Sketch — связанные стили для фигур и текста. Это позволяет объединить разные элементы, придав им одинаковый внешний вид и в несколько кликов менять внешний вид всех ваших объектов. То же самое касается текста. Так же можно создавать символы, превращая выбранный слой в удобный для повторного использования элемент.
					p.article__item-text Стоимость Sketch
					p.article__item-text Первоначальная стоимость программы в $30 (сегодня $99), была крайне привлекательной.
					p.article__item-text 2. Avocode
					p.article__item-text Avocode работает как системное или веб-приложение и позволяет дизайнерам быстро передавать макеты для вёрстки. Поддерживается работа с папками, слоями, цветами, текстом и экспорт графики в растр и вектор. Свойства объектов представлены сразу в виде CSS, с поддержкой форматирования для CSS-препроцессоров.
					p.article__item-text Стоимость Avocode
					p.article__item-text Avocode стоит $10 в месяц для проектов, которые подразумевают интеграцию со Slack и редактирование полномочий (Business). Если у вас небольшая команда (один-три человека) и нет необходимости в настройке разрешений, вы можете ограничится планом за $7 в месяц (Garage).
					p.article__item-text 3.Sympli
					p.article__item-text Sympli — это не просто инструмент для передачи дизайна, а полноценная платформа для совместной работы, которая идеально вписывается в стандартный процесс разработки продукта, включая процессы передачи макетов Photoshop (поддержка XD появится в ближайшее время) или Sketch, а также импорт дизайна в Android Studio и Xcode. Этот инструмент сильно ускоряет разработку программного продукта.
					p.article__item-text Самое большое достоинство Sympli — полноценная интеграция с Xcode и Android Studio, . Это делает его полноценным звеном цепи в процессе воплощения изначального дизайна в в фрагментах кода.
					p.article__item-text Стоимость Sympli
					p.article__item-text Стоимость Sympli зависит от количества проектов. Сервис предоставляется бесплатно для одного активного проекта. Основной план Pro предоставляется за $25 в месяц. Он рассчитан на 8 активных проектов одновременно. В платных планах не ограничено количество членов команды, участвующих в проекте, а также они предоставляют полноценную техническую поддержку.
					p.article__item-text 4. Zeplin
					p.article__item-text Zeplin — еще один инструмент для совместной работы дизайнеров UI и фронтенд-разработчиков. Дизайнеры экспортируют файлы из Photoshop или Sketch в Zeplin, и он отображает все свойства дизайна для разработчиков. В отличие с Avocode, Zeplin, кроме веб-проектов, поддерживает Android и iOS. Разработчики могут просматривать и копировать стили в формате CSS для веба, XML-ресурсы для Android, UI Font или UI Label экстеншены для iOS.
					p.article__item-text Стоимость Zeplin
					p.article__item-text Цена подписки зависит от числа активных проектов. Сервис предоставляется бесплатно для одного проекта. Наиболее популярен план Growing business, который стоит $25 в месяц и подходит для одновременной работы над 8 проектами. Все платные планы не ограничивают численность команды.
				li.article__item.hide(wp_index='3')
					.article__item-title Советы начинающему веб-разработчику
					.article__item-date 15 апреля 2017
					p.article__item-text#some Не секрет, что языки программирования web-приложений набирают свою популярность. В силу своей простоты доступа к изучающим материалам, они притягивают к себе множество новичков, которые вооружившись книгами и информацией с форумов, несутся на всевозможные фрилансы, закидывая рынок веб-приложений проектами, дальнейшая доработка которых практически не возможна (лучше сделать все заново с нуля, чем поддерживать уже существующий код). Многие берут деньги с заказчиков и хватаются за проекты, которые им не по силам, тем самым портят впечатления о фрилансерах. Но как известно «научится играть на гитаре, можно только играя на гитаре», так же и для того чтобы освоить веб-разработку, нужно ею заниматься и постоянно совершенствоваться, многие вещи приходят только на практике. Ниже приведены несколько советов начинающим веб-мастерам о том как писать код основываясь на собственном опыте доработок разнообразных проектов.
					p.article__item-text 1. Хорошо ознакомьтесь с документацией языка
					p.article__item-text Многие программисты (например на С\С++\Java) при необходимости разработать серверные скрипты веб-ресурса, пользуясь C – подобностью синтаксиса PHP, начинают создавать код, основываясь на своем опыте разработки в прикладном программирование.
					p.article__item-text 2. Не используйте старые конструкции языка
					p.article__item-text Все популярные языки постоянно развиваются, появляются новые конструкции и функции которые должны улучшить работу Ваших приложений. Более старые, медленные и не эффективные, помечаются разработчиками языка как устаревшие. Так что, например написание скрипта на более старой версии языка, может вызвать ошибки и сбои при работе Вашего проекта на более новой версии. Так что не забываем следить за нововведениями.
					p.article__item-text 3. Не изобретайте велосипед
					p.article__item-text Если перед Вами стоит задача, задумайтесь, а не приходилось ли её делать раньше кому-то до Вас? Вполне возможно что это уже реализовано в самом языке, возможно другим разработчиком.
					p.article__item-text 4. Нужно быть параноиком
					p.article__item-text Всегда, ВСЕГДА, проверяем данные пришедшие с клиента на их подлинность. Убираем HTML, чистим кавычки, слешы, преобразовываем к числу (если нужно) и только потом подставляем это в запрос, не раньше.
					p.article__item-text 5. Пишите универсальный код
					p.article__item-text Когда перед Вами становится задача, которая может применяться где-то еще в проекте (или в другом проекте) целесообразно вынести ее в отдельную функцию, или даже в отдельный модуль (не забываем про совет в пункте 3).
					p.article__item-text 6. Не усложняйте код
					p.article__item-text Написанный Вами код должен быть максимально простым и понятным для других людей (в том числе и для Вас, после того как Вы спустя год вернетесь к старому проекту).
					p.article__item-text 7. Не забываем комментировать
					p.article__item-text Ну тут все просто, комментируем важные момента кода, и оформляем комментарии к классам, свойствам, методам, и функциям.

					p.article__item-text 8. Не забываем про ООП
					p.article__item-text PHP, JavaScript и не которые другие языки программирования – это полноценные ООП языкы, проектируя проект, не забывайте про это. Классовая иерархия позволит не только легко расширять код, но и упростит использование уже написанного кода в других проектах.
					p.article__item-text 9. Учим шаблоны программирования
					p.article__item-text Шаблоны программирования это отдельная широкая тема, которая позволит Вам более четко понять принципы ООП программирования и избежать ошибок в проектировании. Особенно нужно ознакомится с паттерном MVC.
					p.article__item-text 10. Не делаем средствами PHP/JavaScript то, что можно сделать средствами SQL
					p.article__item-text Дело в том, что SQL запросы выполняются на уровне драйвера и работают в разы быстрей чем PHP. В MySQL или в другой СУБД достаточно встроенных функций и конструкций что бы сделать все что Вам нужно. Например что бы узнать количество записей, можно использовать SQL функцию COUNT.
